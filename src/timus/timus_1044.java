package timus;

//1044. Счастливые билеты. Easy!
//        Ограничение времени: 2.0 секунды
//        Ограничение памяти: 64 МБ
//        Руководство автобусного предприятия в Екатеринбурге обеспокоено тем, что пассажиры не любят оплачивать свой проезд, покупая билет в автобусе. Чтобы решить эту проблему, позвали консультанта из Уральского университета. Этот консультант сказал, что он сам не покупает билеты в автобусе, потому что они редко оказываются счастливыми (билет называется счастливым, если в его номере сумма первой половины цифр равняется сумме второй половины цифр). Руководство задумалось, сколько билетов с номером длины N являются счастливыми. При N = 2 получается только 10 счастливых билетов (с номерами 00, 11, 22, 33, 44, 55, 66, 77, 88, 99). При N = 4 счастливых билетов уже 670. А сколько счастливых билетов для других значений N?
//        Помогите автобусному предприятию. Напишите программу, которая посчитает количество счастливых билетов, номер которых состоит из N цифр.
//        Исходные данные
//        В единственной строке записано чётное число N — количество цифр в номере билета (2 ≤ N ≤ 8).
//        Результат
//        Выведите количество билетов, в номере которых сумма первой половины цифр равняется сумме второй половины цифр.

import java.io.*;

public class timus_1044 {
    public static void main(String[] args) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(in.readLine().trim());
        int half = N / 2;
        int maxSum = 9 * half;

        // dp[s] = число способов получить сумму s из half цифр
        long[] dp = new long[maxSum + 1];
        dp[0] = 1;

        for (int i = 0; i < half; i++) {
            long[] next = new long[maxSum + 1];
            for (int sum = 0; sum <= 9 * i; sum++) {
                if (dp[sum] == 0) continue;
                for (int digit = 0; digit <= 9; digit++) {
                    next[sum + digit] += dp[sum];
                }
            }
            dp = next;
        }

        long result = 0;
        for (long ways : dp) {
            result += ways * ways;
        }

        System.out.println(result);
    }
}